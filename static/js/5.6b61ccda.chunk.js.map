{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","hoc/withAuthRedirect.tsx","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/AddMessageForm/AddMessageForm.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","redux/selectors/messagesSelector.ts","components/Dialogs/Dialogs.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","st","formControl","TextArea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","requiredField","value","undefined","maxLength","max","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","Dialog","id","userName","photo","activeClassName","active","dialog","user","img","src","alt","Message","message","maxLength50","reduxForm","form","add","onSubmit","handleSubmit","textArea","btn","getDialogsData","messages","dialogsData","getMessagesData","messagesData","compose","useSelector","dispatch","useDispatch","dialogs","dialogsItems","map","item","formData","actions","sendMessage","newMessage"],"mappings":"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","file":"static/js/5.6b61ccda.chunk.js","sourcesContent":["import React from 'react'\r\nimport st from './FormsControls.module.css'\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\n\r\ntype FormControlType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nconst FormControl: React.FC<FormControlType> = ({ meta: { touched, error }, children }) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={`${st.formControl} ${hasError && st.error}`}>\r\n            {children}\r\n            {hasError && <div><span>{error}</span></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props\r\n    return (<FormControl {...props}>\r\n        <textarea {...input} {...restProps} />\r\n    </FormControl>)\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>\r\n    (\r\n        placeholder: string,\r\n        name: FormKeysType,\r\n        validators: FieldValidatorType[],\r\n        component: React.FC<WrappedFieldProps>,\r\n        props = {},\r\n        text: string = \"\",\r\n        className: string = \"\") {\r\n    return (\r\n        <div>\r\n            <Field\r\n                className={className}\r\n                name={name}\r\n                component={component}\r\n                placeholder={placeholder}\r\n                validate={validators}\r\n                {...props} /> {text}\r\n        </div>)\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__M0W-4\",\"error\":\"FormsControls_error__2fNsK\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    return value ? undefined : \"Field is required\"\r\n}\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => (value) => {\r\n    return value && value.length > max ? `Max length is ${max} symbols` : undefined\r\n}","import React from 'react'\r\nimport { Redirect } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from '../redux/reduxStore';\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n}\r\n\r\nfunction withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent = (props: MapPropsType & DispatchPropsType) => {\r\n        const { isAuth, ...restProps } = props\r\n        return !isAuth\r\n            ? <Redirect to=\"/login\" />\r\n            : <Component {...restProps as WCP} />\r\n    }\r\n    return connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToProps, {})(RedirectComponent);\r\n}\r\n\r\nexport default withAuthRedirect;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__24Zhq\",\"active\":\"Dialog_active__XkXzf\",\"user\":\"Dialog_user__35ZuG\",\"img\":\"Dialog_img__37Hiv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2Wplz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add\":\"AddMessageForm_add__1hf1H\",\"textArea\":\"AddMessageForm_textArea__LHXOn\",\"btn\":\"AddMessageForm_btn__1DGDz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__37K0U\",\"dialogsItems\":\"Dialogs_dialogsItems__2XYIc\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport st from './Dialog.module.css'\r\n\r\ntype ProsType = {\r\n  id: number\r\n  userName: string\r\n  photo: string\r\n}\r\n\r\nconst Dialog: React.FC<ProsType> = ({id, userName, photo}) => {\r\n  return (\r\n    <NavLink\r\n      to={`/dialogs/${id}`}\r\n      activeClassName={st.active}\r\n      className={st.dialog}\r\n    >\r\n      <div className={st.user}>\r\n        <img className={st.img} src={photo} alt=\"Avatar example\"></img>\r\n        {userName}\r\n      </div>\r\n    </NavLink>\r\n  );\r\n}\r\n\r\nexport default Dialog;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport st from './Message.module.css'\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = ({message}) => {\r\n  return (\r\n      <div className={st.message}>{message}</div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import st from './AddMessageForm.module.css'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLength, requiredField } from '../../../utils/validators/validators'\r\nimport { createField, GetStringKeys, TextArea } from '../../common/FormsControls/FormsControls'\r\n\r\nconst maxLength50 = maxLength(50);\r\n\r\ntype AddMessageFormType = {\r\n    newMessage: string\r\n}\r\n\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form className={st.add} onSubmit={props.handleSubmit}>\r\n            {createField<GetStringKeys<AddMessageFormType>>('Your message...', 'newMessage', [requiredField, maxLength50], TextArea, {}, '', st.textArea)}\r\n            <button className={st.btn}>\r\n                Send message\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddMessageFormType, PropsType>({ form: 'message' })(AddMessageForm);","import { AppStateType } from '../reduxStore';\r\n\r\nexport const getDialogsData = (state: AppStateType) => {\r\n    return state.messages.dialogsData\r\n}\r\n\r\nexport const getMessagesData = (state: AppStateType) => {\r\n    return state.messages.messagesData\r\n}","import React from 'react'\r\n// Components\r\nimport Dialog from './Dialog/Dialog'\r\nimport Message from './Message/Message'\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\r\n// Styles\r\nimport st from './Dialogs.module.css'\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { actions } from '../../redux/messagesReducer'\r\nimport { getDialogsData, getMessagesData } from '../../redux/selectors/messagesSelector'\r\nimport { compose } from 'redux'\r\n// HOC\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect'\r\n\r\ntype FormDataType = {\r\n  newMessage: string\r\n}\r\n\r\nconst Dialogs: React.FC = () => {\r\n\r\n  const dialogsData = useSelector(getDialogsData)\r\n  const messagesData = useSelector(getMessagesData)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmit = (formData: FormDataType) => {\r\n    dispatch(actions.sendMessage(formData.newMessage))\r\n  }\r\n\r\n  return (\r\n    <div className={st.dialogs}>\r\n      <div className={st.dialogsItems}>\r\n        {dialogsData.map((item) => (\r\n          <Dialog\r\n            key={item.id}\r\n            id={item.id}\r\n            userName={item.userName}\r\n            photo={item.photo}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className={st.messages}>\r\n        {messagesData.map((item) => (\r\n          <Message key={item.id} message={item.message} />\r\n        ))}\r\n        <AddMessageForm onSubmit={onSubmit}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect)(Dialogs);\r\n"],"sourceRoot":""}