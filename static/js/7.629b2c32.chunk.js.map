{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/Login/Login.module.css","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","st","formControl","TextArea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","requiredField","value","undefined","maxLength","max","length","reduxForm","form","handleSubmit","captchaUrl","wrapper","onSubmit","inline","type","src","alt","formSummaryError","btn","Login","isAuth","useSelector","getIsAuth","getCaptchaUrl","dispatch","useDispatch","to","formData","email","password","rememberMe","captcha","login"],"mappings":"2QAUMA,EAAyC,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SAClEC,EAAWH,GAAWC,EAE5B,OACI,sBAAKG,UAAS,UAAKC,IAAGC,YAAR,YAAuBH,GAAYE,IAAGJ,OAApD,UACKC,EACAC,GAAY,8BAAK,+BAAOF,UAKxBM,EAAwC,SAACC,GAAW,IACrDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAD6C,YACtBS,EADsB,mBAE5D,OAAQ,cAACV,EAAD,2BAAiBU,GAAjB,aACJ,oDAAcC,GAAWC,QAIpBC,EAAqC,SAACH,GAAW,IAClDC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAD0C,YACnBS,EADmB,mBAEzD,OACI,cAACV,EAAD,2BAAiBU,GAAjB,aACI,iDAAWC,GAAWC,QAK3B,SAASE,EAERC,EACAC,EACAC,EACAC,GAGyB,IAFzBR,EAEwB,uDAFhB,GACRS,EACwB,uDADT,GACfb,EAAwB,uDAAJ,GACxB,OACI,gCACI,cAAC,IAAD,aACIA,UAAWA,EACXU,KAAMA,EACNE,UAAWA,EACXH,YAAaA,EACbK,SAAUH,GACNP,IAPZ,IAOuBS,O,oBCrD/BE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,iCCC3E,oEAAO,IAAMC,EAAoC,SAACC,GAC9C,OAAOA,OAAQC,EAAY,qBAGlBC,EAAY,SAACC,GAAD,OAAqC,SAACH,GAC3D,OAAOA,GAASA,EAAMI,OAASD,EAAxB,wBAA+CA,EAA/C,iBAA+DF,K,oBCN1EJ,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,OAAS,sBAAsB,MAAQ,qBAAqB,IAAM,mBAAmB,iBAAmB,kC,4GCkCvKO,cAAkD,CAAEC,KAAM,SAA1DD,EAjB4F,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAc5B,EAAwB,EAAxBA,MAAO6B,EAAiB,EAAjBA,WAC/H,OACI,uBAAM1B,UAAWC,IAAG0B,QAASC,SAAUH,EAAvC,UACKjB,YAAqC,QAAS,QAAS,CAACS,KAAgBV,IAAO,GAAI,GAAIN,IAAGI,OAC1FG,YAAqC,WAAY,WAAY,CAACS,KAAgBV,IAAO,GAAI,GAAIN,IAAGI,OACjG,sBAAKL,UAAWC,IAAG4B,OAAnB,UACKrB,YAAqC,GAAI,aAAc,GAAID,IAAO,CAAEuB,KAAM,aAC3E,+CAEHJ,GAAc,qBAAKK,IAAKL,EAAYM,IAAI,YACxCN,GAAclB,YAAY,qBAAsB,UAAW,CAACS,KAAgBV,IAAO,GAAI,GAAIN,IAAGI,OAC9FR,GAAS,qBAAKG,UAAWC,IAAGgC,iBAAnB,SAAsCpC,IAChD,wBAAQG,UAAWC,IAAGiC,IAAtB,yB,wBCQGC,UApBS,WACpB,IAAMC,EAASC,YAAYC,KACrBZ,EAAaW,YAAYE,KACzBC,EAAWC,cAOjB,OAAIL,EACO,cAAC,IAAD,CAAUM,GAAG,aAGhB,sBAAK1C,UAAWC,IAAG0B,QAAnB,UACJ,oBAAI3B,UAAWC,IAAGY,KAAlB,mBACA,cAAC,EAAD,CAAWe,SAXE,SAACe,GAAmC,IACzCC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,SAAUC,EAAwBH,EAAxBG,WAAYC,EAAYJ,EAAZI,QACrCP,EAASQ,YAAMJ,EAAOC,EAAUC,EAAYC,KASbrB,WAAYA","file":"static/js/7.629b2c32.chunk.js","sourcesContent":["import React from 'react'\r\nimport st from './FormsControls.module.css'\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\n\r\ntype FormControlType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nconst FormControl: React.FC<FormControlType> = ({ meta: { touched, error }, children }) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={`${st.formControl} ${hasError && st.error}`}>\r\n            {children}\r\n            {hasError && <div><span>{error}</span></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props\r\n    return (<FormControl {...props}>\r\n        <textarea {...input} {...restProps} />\r\n    </FormControl>)\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>\r\n    (\r\n        placeholder: string,\r\n        name: FormKeysType,\r\n        validators: FieldValidatorType[],\r\n        component: React.FC<WrappedFieldProps>,\r\n        props = {},\r\n        text: string = \"\",\r\n        className: string = \"\") {\r\n    return (\r\n        <div>\r\n            <Field\r\n                className={className}\r\n                name={name}\r\n                component={component}\r\n                placeholder={placeholder}\r\n                validate={validators}\r\n                {...props} /> {text}\r\n        </div>)\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__M0W-4\",\"error\":\"FormsControls_error__2fNsK\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const requiredField: FieldValidatorType = (value) => {\r\n    return value ? undefined : \"Field is required\"\r\n}\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => (value) => {\r\n    return value && value.length > max ? `Max length is ${max} symbols` : undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__3Ph-H\",\"text\":\"Login_text__Y66_4\",\"inline\":\"Login_inline__21TIx\",\"input\":\"Login_input__12yZv\",\"btn\":\"Login_btn__261XC\",\"formSummaryError\":\"Login_formSummaryError__3Kg60\"};","import { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { requiredField } from '../../../utils/validators/validators'\r\nimport { createField, Input, GetStringKeys } from '../../common/FormsControls/FormsControls'\r\nimport st from '../Login.module.css'\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string | null\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form className={st.wrapper} onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>('Login', 'email', [requiredField], Input, {}, '', st.input)}\r\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [requiredField], Input, {}, '', st.input)}\r\n            <div className={st.inline}>\r\n                {createField<LoginFormValuesTypeKeys>('', 'rememberMe', [], Input, { type: 'checkbox' })}\r\n                <p>Remember me</p>\r\n            </div>\r\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha\" />}\r\n            {captchaUrl && createField('Symbols from image', 'captcha', [requiredField], Input, {}, '', st.input)}\r\n            {error && <div className={st.formSummaryError}>{error}</div>}\r\n            <button className={st.btn}>Login</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: \"login\" })(LoginForm);","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n// Components\r\nimport LoginForm from './LoginForm/LoginForm'\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { login } from '../../redux/authReducer'\r\nimport { getCaptchaUrl, getIsAuth } from '../../redux/selectors/authSelectors'\r\n// Styles\r\nimport st from './Login.module.css'\r\n\r\ntype LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string | null\r\n}\r\n\r\nconst Login: React.FC = () => {\r\n    const isAuth = useSelector(getIsAuth)\r\n    const captchaUrl = useSelector(getCaptchaUrl)\r\n    const dispatch = useDispatch()\r\n    \r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        const { email, password, rememberMe, captcha } = formData\r\n        dispatch(login(email, password, rememberMe, captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to=\"/profile\"/>\r\n    }\r\n\r\n    return (<div className={st.wrapper}>\r\n        <h1 className={st.text}>LOGIN</h1>\r\n        <LoginForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>)\r\n}\r\n\r\nexport default Login\r\n"],"sourceRoot":""}