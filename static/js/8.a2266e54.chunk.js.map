{"version":3,"sources":["components/common/Pagination/Pagination.module.css","components/FindUsers/User/User.module.css","components/common/Pagination/Pagination.tsx","assets/img/user.jpg","components/FindUsers/User/User.tsx","redux/selectors/findUsersSelectors.ts","components/FindUsers/UsersSeacrhForm/UsersSearchForm.tsx","components/FindUsers/FindUsers.tsx"],"names":["module","exports","Pagination","totalItemsCount","pageSize","onPageChanged","currentPage","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","st","buttons","btn","onClick","filter","p","map","cn","selectedPage","pageNumber","User","followingInProgress","user","dispatch","useDispatch","container","to","id","photo","src","photos","small","userPhoto","alt","name","followed","disabled","some","unfollow","follow","info","status","getUsers","state","findUsers","users","getPageSize","createSelector","u","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getFindUsersFilter","userSearchFormValidate","UserSearchForm","React","memo","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","values","setSubmitting","isSubmitting","type","as","value","FindUsers","pageTitle","history","useHistory","querystring","require","useEffect","parsed","parse","location","search","substring","actualPage","actualFilter","page","requestUsers","query","pathname","stringify","Preloader"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,WAAa,+BAA+B,aAAe,iCAAiC,IAAM,0B,oBCA1JD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,wBAAwB,KAAO,mBAAmB,MAAQ,oBAAoB,IAAM,oB,sICyC7HC,EA9ByB,SAAC,GAIrC,IAJsH,IAA/EC,EAA8E,EAA9EA,gBAAiBC,EAA6D,EAA7DA,SAAUC,EAAmD,EAAnDA,cAAeC,EAAoC,EAApCA,YAAoC,IAAvBC,mBAAuB,MAAT,GAAS,EAC/GC,EAAaC,KAAKC,KAAKP,EAAkBC,GAEzCO,EAAkB,GACfC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAGf,IAAME,EAAuBL,KAAKC,KAAKF,EAAaD,GARiE,EAS3EQ,mBAAiB,GAT0D,mBAS9GC,EAT8G,KAS/FC,EAT+F,KAU/GC,GAAiCF,EAAgB,GAAKT,EAAc,EACpEY,EAAiCH,EAAgBT,EAEvD,OACI,sBAAKa,UAAWC,IAAGC,QAAnB,UACKN,EAAgB,GACjB,wBAAQI,UAAWC,IAAGE,IAAKC,QAAS,kBAAIP,EAAiBD,EAAc,IAAvE,kBACCL,EACIc,QAAO,SAAAC,GAAC,OAAKA,GAAKR,GAA2BQ,GAAKP,KAClDQ,KAAI,SAACD,GAAD,OACD,sBAEIF,QAAS,kBAAMnB,EAAcqB,IAC7BN,UAAWQ,IAAG,eAAEP,IAAGQ,aAAcvB,IAAgBoB,GAAIL,IAAGS,YAH5D,SAIKJ,GAHIA,MAIhBZ,EAAeE,GAChB,wBAAQI,UAAWC,IAAGE,IAAKC,QAAS,kBAAMP,EAAiBD,EAAgB,IAA3E,sB,kBCtCG,MAA0B,iC,wBCgD1Be,EAnCmB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,oBAAqBC,EAAW,EAAXA,KAClDC,EAAWC,cACjB,OACM,sBAAKf,UAAWC,IAAGY,KAAnB,UACE,sBAAKb,UAAWC,IAAGe,UAAnB,UACE,cAAC,IAAD,CAASC,GAAE,oBAAeJ,EAAKK,IAA/B,SACE,qBACElB,UAAWC,IAAGkB,MACdC,IAA2B,OAAtBP,EAAKQ,OAAOC,MAAiBT,EAAKQ,OAAOC,MAAQC,EACtDC,IAAKX,EAAKY,SAGbZ,EAAKa,SACJ,wBACEC,SAAUf,EAAoBgB,MAAK,SAAAV,GAAE,OAAIA,IAAOL,EAAKK,MACrDd,QAAS,kBAAMU,EAASe,YAAShB,EAAKK,MACtClB,UAAWC,IAAGE,IAHhB,sBAOE,wBACEwB,SAAUf,EAAoBgB,MAAK,SAAAV,GAAE,OAAIA,IAAOL,EAAKK,MACrDd,QAAS,kBAAMU,EAASgB,YAAOjB,EAAKK,MACpClB,UAAWC,IAAGE,IAHhB,uBAQN,sBAAKH,UAAWC,IAAG8B,KAAnB,UACE,6BAAKlB,EAAKY,OACV,4BAAIZ,EAAKmB,gB,kBCxCRC,EAAW,SAACC,GACrB,OAAOA,EAAMC,UAAUC,OAWdC,GANmBC,YAAeL,GAAU,SAACG,GACtD,OAAOA,EAAM/B,QAAO,SAAAkC,GAAC,OAAI,QAKF,SAACL,GACxB,OAAOA,EAAMC,UAAUnD,WAGdwD,EAAqB,SAACN,GAC/B,OAAOA,EAAMC,UAAUM,iBAGdC,EAAiB,SAACR,GAC3B,OAAOA,EAAMC,UAAUjD,aAGdyD,EAAgB,SAACT,GAC1B,OAAOA,EAAMC,UAAUS,YAGdC,EAAyB,SAACX,GACnC,OAAOA,EAAMC,UAAUvB,qBAGdkC,EAAqB,SAACZ,GAC/B,OAAOA,EAAMC,UAAU9B,QC9BrB0C,EAAyB,WAE3B,MADe,IAuDJC,EAxC6BC,IAAMC,MAAK,YAA0B,IAAvBC,EAAsB,EAAtBA,gBAChD9C,EAAS+C,YAAYN,GAa3B,OACI,8BACI,cAAC,IAAD,CACIO,oBAAkB,EAClBC,cAAe,CAAEC,KAAMlD,EAAOkD,KAAMC,OAAQC,OAAOpD,EAAOmD,SAC1DE,SAAUX,EACVY,SAlBG,SAACC,EAAD,GAAsG,IAAxEC,EAAuE,EAAvEA,cACnCxD,EAAqB,CACvBkD,KAAMK,EAAOL,KACbC,OACsB,SAAlBI,EAAOJ,OACD,KACkB,SAAlBI,EAAOJ,QAGrBL,EAAgB9C,GAChBwD,GAAc,IAIV,SAMK,gBAAGC,EAAH,EAAGA,aAAH,OACG,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,OAAOtC,KAAK,SACxB,eAAC,IAAD,CAAOA,KAAK,SAASuC,GAAG,SAAxB,UACI,wBAAQC,MAAM,OAAd,iBACA,wBAAQA,MAAM,OAAd,2BACA,wBAAQA,MAAM,QAAd,gCAEJ,wBAAQF,KAAK,SAASpC,SAAUmC,EAAhC,6B,QCoDTI,UA9EwB,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAEjC1B,EAAkBW,YAAYZ,GAC9BJ,EAAQgB,YAAYnB,GACpBjD,EAAWoE,YAAYf,GACvBnD,EAAckE,YAAYV,GAC1BE,EAAaQ,YAAYT,GACzB/B,EAAsBwC,YAAYP,GAClCxC,EAAS+C,YAAYN,GAErBsB,EAAUC,cACVvD,EAAWC,cACXuD,EAAcC,EAAQ,KAE5BC,qBAAU,WACR,IAAMC,EAA0BH,EAAYI,MAAMN,EAAQO,SAASC,OAAOC,UAAU,IAEhFC,EAAa5F,EACb6F,EAAe1E,EACboE,EAAOO,OAAMF,GAAcL,EAAOO,MAClCP,EAAOlB,OAAMwB,EAAY,2BAAQA,GAAR,IAAsBxB,KAAMkB,EAAOlB,QAC5DkB,EAAOjB,SAAQuB,EAAY,2BAC5BA,GAD4B,IAE/BvB,OAA0B,SAAlBiB,EAAOjB,OACX,KAAyB,SAAlBiB,EAAOjB,UAIpB1C,EAASmE,YAAaH,EAAY9F,EAAU+F,MAC3C,IAEHP,qBAAU,WACR,IAAMU,EAAyB,GAC3B7E,EAAOkD,OAAM2B,EAAM3B,KAAOlD,EAAOkD,MACf,OAAlBlD,EAAOmD,SAAiB0B,EAAM1B,OAASC,OAAOpD,EAAOmD,SACrC,IAAhBtE,IAAmBgG,EAAMF,KAAOvB,OAAOvE,IAE3CkF,EAAQ3E,KAAK,CACX0F,SAAU,SACVP,OAAQN,EAAYc,UAAUF,OAE/B,CAAC7E,EAAQnB,IAUZ,OACE,gCACE,6BAAKiF,IACJvB,EACC,cAACyC,EAAA,EAAD,IAEA,qCACE,cAAC,EAAD,CAAgBlC,gBAXA,SAAC9C,GACvBS,EAASmE,YAAa,EAAGjG,EAAUqB,OAW7B,cAAC,EAAD,CACEtB,gBAAiB0D,EACjBzD,SAAUA,EACVC,cAnBY,SAACyB,GACrBI,EAASmE,YAAavE,EAAY1B,EAAUqB,KAmBpCnB,YAAaA,IAEdkD,EAAM7B,KAAI,SAACM,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACND,oBAAqBA,GAFhBC,EAAKK","file":"static/js/8.a2266e54.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Pagination_buttons__3r7Ng\",\"pageNumber\":\"Pagination_pageNumber__1bkeD\",\"selectedPage\":\"Pagination_selectedPage__Yzlt_\",\"btn\":\"Pagination_btn__vb_lI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__2PiGS\",\"container\":\"User_container__1e9Zk\",\"info\":\"User_info__1ACZ9\",\"photo\":\"User_photo__WT1UX\",\"btn\":\"User_btn__3_BiT\"};","import React, {useState} from 'react';\r\nimport st from './Pagination.module.css';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    onPageChanged: (p: number) => void,\r\n    currentPage: number, \r\n    portionSize?: number\r\n}\r\n\r\nconst Pagination: React.FC<PropsType> = ({ totalItemsCount, pageSize, onPageChanged, currentPage, portionSize = 10 }) => {\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    const pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const portionCount: number = Math.ceil(pagesCount / portionSize);\r\n    const [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const leftPortionPageNumber: number = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber: number = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={st.buttons}>\r\n            {portionNumber > 1 &&\r\n            <button className={st.btn} onClick={()=>setPortionNumber(portionNumber-1)}>PREV</button>}\r\n            {pages\r\n                .filter(p => (p >= leftPortionPageNumber) && (p <= rightPortionPageNumber))\r\n                .map((p) => (\r\n                    <span\r\n                        key={p}\r\n                        onClick={() => onPageChanged(p)}\r\n                        className={cn({[st.selectedPage]:currentPage === p}, st.pageNumber)}>\r\n                        {p}</span>))}\r\n            {portionCount > portionNumber &&\r\n            <button className={st.btn} onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}\r\n        </div>)\r\n}\r\n\r\nexport default Pagination;","export default __webpack_public_path__ + \"static/media/user.181d3cde.jpg\";","import React from 'react'\r\nimport st from './User.module.css'\r\nimport userPhoto from '../../../assets/img/user.jpg'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { UserType } from '../../../types/types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { follow, unfollow } from '../../../redux/findUsersReducer'\r\n\r\ntype PropsType = {\r\n  followingInProgress: number[],\r\n  user: UserType\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({ followingInProgress, user }) => {\r\n  const dispatch = useDispatch()\r\n  return (\r\n        <div className={st.user}>\r\n          <div className={st.container}>\r\n            <NavLink to={`./profile/${user.id}`}>\r\n              <img\r\n                className={st.photo}\r\n                src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                alt={user.name}\r\n              />\r\n            </NavLink>\r\n            {user.followed ? (\r\n              <button\r\n                disabled={followingInProgress.some(id => id === user.id)}\r\n                onClick={() => dispatch(unfollow(user.id))}\r\n                className={st.btn}>\r\n                UNFOLLOW\r\n              </button>\r\n            ) : (\r\n                <button\r\n                  disabled={followingInProgress.some(id => id === user.id)}\r\n                  onClick={() => dispatch(follow(user.id))}\r\n                  className={st.btn}>\r\n                FOLLOW\r\n              </button>\r\n            )}\r\n          </div>\r\n          <div className={st.info}>\r\n            <h3>{user.name}</h3>\r\n            <p>{user.status}</p>\r\n          </div>\r\n        </div>)\r\n};\r\n\r\nexport default User;\r\n","import { AppStateType } from '../reduxStore'\r\nimport { createSelector } from 'reselect'\r\n\r\nexport const getUsers = (state:AppStateType) => {\r\n    return state.findUsers.users\r\n}\r\n\r\n// Приклад складного селектора стовореного за допомогою бібліотеки reselect\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\n// -----------------------------------------------------------------------\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.findUsers.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.findUsers.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.findUsers.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.findUsers.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.findUsers.followingInProgress\r\n}\r\n\r\nexport const getFindUsersFilter = (state: AppStateType) => {\r\n    return state.findUsers.filter\r\n}","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { FilterType } from '../../../redux/findUsersReducer'\r\nimport { useSelector } from 'react-redux'\r\nimport { getFindUsersFilter } from '../../../redux/selectors/findUsersSelectors'\r\n\r\nconst userSearchFormValidate = () => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype UserFormValueType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\n\r\nconst UserSearchForm: React.FC<PropsType> = React.memo(({ onFilterChanged }) => {\r\n    const filter = useSelector(getFindUsersFilter)\r\n    const submit = (values: UserFormValueType, { setSubmitting }: { setSubmitting: (isSubmiting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend:\r\n                values.friend === 'null'\r\n                    ? null\r\n                    : values.friend === 'true'\r\n                    ? true : false\r\n        }\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType }}\r\n                validate={userSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default UserSearchForm","import React, { useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n// Components\r\nimport Pagination from '../common/Pagination/Pagination'\r\nimport User from './User/User'\r\nimport UserSearchForm from './UsersSeacrhForm/UsersSearchForm'\r\nimport Preloader from '../common/Preloader/Preloader'\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FilterType } from '../../redux/findUsersReducer'\r\nimport {\r\n  getCurrentPage, getFindUsersFilter, getFollowingInProgress,\r\n  getIsFetching, getPageSize, getTotalUsersCount, getUsers\r\n} from '../../redux/selectors/findUsersSelectors'\r\nimport { requestUsers } from '../../redux/findUsersReducer'\r\n// Types\r\nimport { UserType } from '../../types/types'\r\n\r\ntype PropsType = {\r\n  pageTitle: string\r\n}\r\n\r\ntype QueryParamsType = {\r\n  term?: string, page?: string, friend?: string\r\n}\r\n\r\nconst FindUsers: React.FC<PropsType> = ({pageTitle}) => {\r\n\r\n  const totalUsersCount = useSelector(getTotalUsersCount)\r\n  const users = useSelector(getUsers)\r\n  const pageSize = useSelector(getPageSize)\r\n  const currentPage = useSelector(getCurrentPage)\r\n  const isFetching = useSelector(getIsFetching)\r\n  const followingInProgress = useSelector(getFollowingInProgress)\r\n  const filter = useSelector(getFindUsersFilter)\r\n\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const querystring = require('querystring')\r\n\r\n  useEffect(() => {\r\n    const parsed: QueryParamsType = querystring.parse(history.location.search.substring(1))\r\n\r\n    let actualPage = currentPage\r\n    let actualFilter = filter\r\n    if (!!parsed.page) actualPage = +parsed.page\r\n    if (!!parsed.term) actualFilter = { ...actualFilter, term: parsed.term }\r\n    if (!!parsed.friend) actualFilter = {\r\n      ...actualFilter,\r\n      friend: parsed.friend === 'null'\r\n        ? null : parsed.friend === 'true'\r\n        ? true : false\r\n    }\r\n\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const query: QueryParamsType = {}\r\n    if (filter.term) query.term = filter.term\r\n    if (filter.friend !== null) query.friend = String(filter.friend)\r\n    if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n    history.push({\r\n      pathname: '/users',\r\n      search: querystring.stringify(query)\r\n    })\r\n  }, [filter, currentPage])\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(requestUsers(pageNumber, pageSize, filter))\r\n  }\r\n\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1, pageSize, filter))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{pageTitle}</h2>\r\n      {isFetching ? (\r\n        <Preloader />\r\n      ) : (\r\n        <>\r\n          <UserSearchForm onFilterChanged={onFilterChanged} />\r\n          <Pagination\r\n            totalItemsCount={totalUsersCount}\r\n            pageSize={pageSize}\r\n            onPageChanged={onPageChanged}\r\n            currentPage={currentPage}\r\n          />\r\n          {users.map((user: UserType) => (\r\n            <User\r\n              key={user.id}\r\n              user={user}\r\n              followingInProgress={followingInProgress}\r\n            />\r\n          ))}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FindUsers\r\n"],"sourceRoot":""}