{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Header/Header.module.css","redux/appReducer.ts","redux/navbarReducer.ts","redux/reduxStore.tsx","components/Navbar/Friends/Friends.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/search_white.svg","components/Navbar/Navbar.tsx","components/Header/logo.svg","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.js","index.js","redux/authReducer.ts","components/Navbar/Friends/Friends.module.css","assets/img/loader.gif","components/common/Preloader/Preloader.tsx","redux/profileReducer.ts","api/api.ts","redux/messagesReducer.ts","utils/object-helpers.js","redux/findUsersReducer.ts"],"names":["module","exports","initialState","initialized","actions","type","appReducer","state","action","friends","id","name","photo","navbarReducer","reducers","combineReducers","profile","profileReducer","messages","messagesReducer","navbar","findUsers","findUsersReducer","auth","authReducer","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","Friends","props","className","st","title","map","item","friend","img","src","alt","text","FriendsContainer","connect","Navbar","nav","to","activeClassName","active","icon","search","Header","isAuth","login","logout","header","logo","loginBlock","wrapper","btn","onClick","HeaderContainer","this","Component","DialogsContainer","React","lazy","ProfileContainer","Login","News","Music","Settings","FindUsersContainer","App","catchAllUnhandledErrors","reason","promise","initializeApp","window","addEventListener","removeEventListener","Suspense","fallback","Preloader","exact","path","render","pageTitle","AppContainer","compose","withRouter","dispatch","getAuth","then","SocialNetworkApp","ReactDOM","StrictMode","document","getElementById","email","captchaUrl","userId","payload","a","authAPI","me","meData","resultCode","ResultCodes","Succsess","data","password","rememberMe","captcha","loginData","ResultCodeForCaptcha","CaptchaIsRequired","getCaptchaUrl","message","length","stopSubmit","_error","securityAPI","url","loadingIcon","style","marginLeft","postsData","likeCount","status","addPost","newPostText","deletePost","postId","setUserProfile","setProfileStatus","savePhotoSuccess","photos","getProfileInfo","profileAPI","getProfileStatus","getStatus","updateProfileStatus","updateStatus","savePhoto","file","saveProfile","getState","Promise","reject","filter","post","instance","axios","create","baseURL","withCredentials","headers","userAPI","getUsers","currentPage","pageSize","get","response","follow","unfollow","delete","put","photoFile","formData","FormData","append","messagesData","dialogsData","userName","sendMessage","newMessage","updateObjectInArray","items","check","objPropName","newObjProps","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setUsers","setCurrentPage","pageNumber","setTotalUsersCount","count","setIsFetching","setFollowingProgress","isFollowing","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","bind","followed"],"mappings":"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","file":"static/js/main.fd412905.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__iAsk2\",\"item\":\"Navbar_item__26SM4\",\"active\":\"Navbar_active__2enci\",\"icon\":\"Navbar_icon__Qc7ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Jm1RZ\",\"logo\":\"Header_logo__3vvBu\",\"loginBlock\":\"Header_loginBlock__29PXN\",\"login\":\"Header_login__1HUgF\",\"wrapper\":\"Header_wrapper__u1Ixr\",\"btn\":\"Header_btn__2eD-s\"};","import { InferActionsTypes } from './reduxStore';\r\nimport { getAuth } from \"./authReducer\";\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n};\r\n\r\nconst actions = {\r\n    initializingSuccess: () => ({ type: 'app/INITIALIZED_SUCCESS' } as const)\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\ntype ActionsTypes =  InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'app/INITIALIZED_SUCCESS': {\r\n            return { ...state, initialized: true }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getAuth()).then(() => dispatch(actions.initializingSuccess()));\r\n}\r\n\r\nexport default appReducer;","import { FriendType } from './../types/types';\r\nconst initialState = {\r\n  friends: [\r\n    {\r\n      id: 1,\r\n      name: \"Dimych\",\r\n      photo:\r\n        \"https://st2.depositphotos.com/3873339/8013/i/600/depositphotos_80131050-stock-photo-realistic-square-picture-frame-on.jpg\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Max\",\r\n      photo:\r\n        \"https://st2.depositphotos.com/3873339/8013/i/600/depositphotos_80131050-stock-photo-realistic-square-picture-frame-on.jpg\",\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Sveta\",\r\n      photo:\r\n        \"https://st2.depositphotos.com/3873339/8013/i/600/depositphotos_80131050-stock-photo-realistic-square-picture-frame-on.jpg\",\r\n    },\r\n  ] as FriendType[],\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst navbarReducer = (state = initialState): InitialStateType => {\r\n  return state;\r\n};\r\n\r\nexport default navbarReducer;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport profileReducer from \"./profileReducer\";\r\nimport messagesReducer from \"./messagesReducer\";\r\nimport navbarReducer from \"./navbarReducer\";\r\nimport findUsersReducer from \"./findUsersReducer\";\r\nimport authReducer from './authReducer';\r\nimport appReducer from './appReducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\n\r\nconst reducers = combineReducers({\r\n  profile: profileReducer,\r\n  messages: messagesReducer,\r\n  navbar: navbarReducer,\r\n  findUsers: findUsersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from \"react\";\r\nimport { FriendType } from \"../../../types/types\";\r\nimport st from \"./Friends.module.css\";\r\n\r\ntype PropsType = {\r\n  friends: FriendType[]\r\n}\r\n\r\nconst Friends: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <h3 className={st.title}>FRIENDS</h3>\r\n      {props.friends.map((item) => (\r\n        <div key={item.id} className={st.friends}>\r\n          <div className={st.friend}>\r\n            <img className={st.img} src={item.photo} alt=\"Avatar example\"></img>\r\n            <p className={st.text}>{item.name}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Friends\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/reduxStore\";\r\nimport { FriendType } from \"../../../types/types\";\r\nimport Friends from \"./Friends\";\r\n\r\ntype MapStatePropsType = {\r\n  friends: FriendType[] \r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    friends: state.navbar.friends\r\n  };\r\n}\r\n\r\nconst FriendsContainer = connect(mapStateToProps)(Friends);\r\n\r\nexport default FriendsContainer;","export default __webpack_public_path__ + \"static/media/search_white.66ea5ec3.svg\";","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport FriendsContainer from \"./Friends/FriendsContainer\";\r\nimport st from \"./Navbar.module.css\";\r\nimport search from \"./search_white.svg\";\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <nav className={st.nav}>\r\n      <NavLink to=\"/profile\" activeClassName={st.active} className={st.item}>\r\n        PROFILE\r\n      </NavLink>\r\n      <NavLink to=\"/dialogs\" activeClassName={st.active} className={st.item}>\r\n        MESSAGES\r\n      </NavLink>\r\n      <NavLink to=\"/news\" activeClassName={st.active} className={st.item}>\r\n        NEWS\r\n      </NavLink>\r\n      <NavLink to=\"/music\" activeClassName={st.active} className={st.item}>\r\n        MUSIC\r\n      </NavLink>\r\n      <NavLink to=\"/users\" activeClassName={st.active} className={st.item}>\r\n        <div className={st.icon}>\r\n          <img src={search} alt=\"serach icon\"/>\r\n          USERS\r\n        </div>\r\n      </NavLink>\r\n      <br />\r\n      <NavLink to=\"/settings\" activeClassName={st.active} className={st.item}>\r\n        SETTINGS\r\n      </NavLink>\r\n      <FriendsContainer />\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport logo from \"./logo.svg\";\r\nimport st from \"./Header.module.css\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n  isAuth: boolean,\r\n  login: string | null,\r\n  logout: () => void\r\n}\r\n\r\nconst Header: React.FC<PropsType> = ({isAuth, login, logout}) => {\r\n  return (\r\n    <header className={st.header}>\r\n      <img className={st.logo} src={logo} alt=\"logo\"></img>\r\n      <div className={st.loginBlock}>\r\n        {isAuth\r\n          ? <div className={st.wrapper}>\r\n            <p className={st.login}>{login}</p>\r\n            <button className={st.btn} onClick={logout}>LogOut</button>\r\n          </div>\r\n          : <NavLink className={st.login} to=\"./login\">Login</NavLink>\r\n        }\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/reduxStore';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean,\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <Header {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    };\r\n};\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, null, AppStateType>(mapStateToProps, { logout })(HeaderContainer);\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { BrowserRouter, Route, withRouter, Redirect, Switch } from \"react-router-dom\";\r\n\r\n// Redux\r\nimport { connect, Provider } from \"react-redux\";\r\nimport { initializeApp } from \"./redux/appReducer\"\r\nimport { compose } from \"redux\";\r\nimport store from \"./redux/reduxStore\";\r\n\r\n//Styles\r\nimport \"./App.css\";\r\n\r\n// Components\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst Login = React.lazy(() => import('./components/Login/Login'));\r\nconst News = React.lazy(() => import('./components/News/News'));\r\nconst Music = React.lazy(() => import('./components/Music/Music'));\r\nconst Settings = React.lazy(() => import('./components/Settings/Settings'));\r\nconst FindUsersContainer = React.lazy(() => import('./components/FindUsers/FindUsersContainer'));\r\n\r\nclass App extends Component {\r\n  catchAllUnhandledErrors = (reason, promise) => {\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className=\"app-wrapper-content\">\r\n          <React.Suspense fallback={Preloader}>\r\n            <Switch>\r\n              <Route\r\n                exact path=\"/\"\r\n                render={() => <Redirect to=\"/profile\" />}\r\n              />\r\n              <Route\r\n                path=\"/profile/:userId?\"\r\n                render={() => <ProfileContainer />}\r\n              />\r\n              <Route\r\n                path=\"/dialogs\"\r\n                render={() => <DialogsContainer />}\r\n              />\r\n              <Route path=\"/news\" render={() => <News />} />\r\n              <Route path=\"/music\" render={() => <Music />} />\r\n              <Route path=\"/users\" render={() => <FindUsersContainer pageTitle=\"React Social Network Users\"/>} />\r\n              <Route path=\"/settings\" render={() => <Settings />} />\r\n              <Route path=\"/login\" render={() => <Login />} />\r\n            </Switch>\r\n          </React.Suspense>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    initialized: state.app.initialized,\r\n  }\r\n}\r\n\r\nconst AppContainer = compose(withRouter, connect(mapStateToProps, { initializeApp }))(App);\r\n\r\nconst SocialNetworkApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default SocialNetworkApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport SocialNetworkApp from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n     <SocialNetworkApp />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n","import { ResultCodes, ResultCodeForCaptcha } from './../api/api';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppStateType, InferActionsTypes } from './reduxStore';\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { authAPI, securityAPI } from \"../api/api\";\r\n\r\nconst initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'auth/SET_AUTH_USER_DATA',\r\n        payload: {\r\n            id: userId, email: email, login: login, isAuth: isAuth\r\n        }\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'auth/GET_CAPTCHA_URL_SUCCESS',\r\n        payload: {\r\n            captchaUrl: captchaUrl\r\n        }\r\n    } as const),\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'auth/SET_AUTH_USER_DATA': {\r\n            return { ...state, ...action.payload }\r\n        }\r\n        case 'auth/GET_CAPTCHA_URL_SUCCESS': {\r\n            return { ...state, ...action.payload }\r\n        } \r\n        default: return state\r\n    }\r\n}\r\n\r\nexport type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getAuth = (): ThunkType => async (dispatch) => {\r\n    const meData = await authAPI.me()\r\n    if (meData.resultCode === ResultCodes.Succsess) {\r\n        const { id, email, login } = meData.data\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: null | string) => async (dispatch: any) => {\r\n    const loginData = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (loginData.resultCode === ResultCodes.Succsess) {\r\n        dispatch(getAuth());\r\n    } else {\r\n        if (loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        const message = loginData.messages.length > 0 ? loginData.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", { _error: message }));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    dispatch(actions.getCaptchaUrlSuccess(data.url));\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    const logoutData = await authAPI.logout()\r\n    if (logoutData.resultCode === ResultCodes.Succsess) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Friends_title__3_m6N\",\"img\":\"Friends_img__39f52\",\"friends\":\"Friends_friends__2_QgE\",\"friend\":\"Friends_friend__n9T_M\",\"text\":\"Friends_text__1ifn9\"};","export default __webpack_public_path__ + \"static/media/loader.9c48f460.gif\";","import React from 'react'\r\nimport loadingIcon from '../../../assets/img/loader.gif'\r\n\r\nconst Preloader: React.FC = () => {\r\n    return (\r\n      <div>\r\n        <img src={loadingIcon} alt=\"Loading\" style={{ marginLeft: \"200px\" }} />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;\r\n","import { GetStateType } from './../types/types';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppStateType, InferActionsTypes } from './reduxStore';\r\nimport { profileAPI } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { PostType, PhotosType, ProfileType } from \"../types/types\";\r\n\r\nconst initialState = {\r\n  postsData: [\r\n    { id: 1, message: \"Hi? how are you?\", likeCount: 0 },\r\n    { id: 2, message: \"It's my first post!\", likeCount: 23 },\r\n  ] as PostType[],\r\n  profile: null as ProfileType | null,\r\n  status: \"\"\r\n};\r\n\r\nexport const actions = {\r\n  addPost: (newPostText: string) => ({ type: 'profile/ADD_POST', newPostText: newPostText } as const),\r\n\r\n  deletePost: (postId: number) => ({ type: 'profile/DELETE_POST', postId: postId } as const),\r\n\r\n  setUserProfile: (profile: ProfileType) => ({ type: 'profile/SET_USER_PROFILE', profile } as const),\r\n\r\n  setProfileStatus: (status: string) => ({ type: 'profile/SET_PROFILE_STATUS', status } as const),\r\n\r\n  savePhotoSuccess: (photos: PhotosType) => ({ type: 'profile/SAVE_PHOTO_SUCCESS', photos } as const),\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'profile/ADD_POST': {\r\n      return {\r\n        ...state,\r\n        postsData: [\r\n          ...state.postsData,\r\n          {\r\n            id: state.postsData[state.postsData.length - 1].id + 1,\r\n            message: action.newPostText,\r\n            likeCount: 0,\r\n          },\r\n        ],\r\n      };\r\n    }\r\n    case 'profile/DELETE_POST': {\r\n      return { ...state, postsData: state.postsData.filter(post => post.id !== action.postId)}\r\n      }\r\n    case 'profile/SET_USER_PROFILE': {\r\n      return { ...state, profile: action.profile }\r\n    }\r\n    case 'profile/SET_PROFILE_STATUS': {\r\n      return { ...state, status: action.status }\r\n    }\r\n    case 'profile/SAVE_PHOTO_SUCCESS': {\r\n      return { ...state, profile: { ...state.profile, photos: action.photos} as ProfileType }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getProfileInfo = (userId: number | null): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getProfileInfo(userId)\r\n  dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getProfileStatus = (userId: number): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getStatus(userId)\r\n  dispatch(actions.setProfileStatus(data));\r\n}\r\n\r\nexport const updateProfileStatus = (status: string): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.updateStatus(status)\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.setProfileStatus(status));\r\n  }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n  const data: any = await profileAPI.savePhoto(file);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.savePhotoSuccess(data.data.photos));\r\n  }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: GetStateType) => {\r\n  const userId = getState().auth.id;\r\n  const data = await profileAPI.saveProfile(profile);\r\n  if (data.resultCode === 0) {\r\n    dispatch(getProfileInfo(userId));\r\n  } else {\r\n    dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0] }));\r\n    return Promise.reject(data.messages[0]);\r\n  }\r\n}\r\n\r\nexport default profileReducer;","import { ProfileType, UserType, PhotosType } from './../types/types';\r\nimport axios, { AxiosResponse } from \"axios\";\r\n\r\nexport enum ResultCodes {\r\n    Succsess = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"f406f314-0e27-4ae0-9815-6188b0f3b0b0\"\r\n    }\r\n})\r\n\r\ntype GetUsersResponseType = {\r\n    items: UserType[],\r\n    totalCount: number,\r\n    error: string\r\n}\r\n\r\ntype FollowResponseType = {\r\n    resultCode: ResultCodes,\r\n    messages: string[],\r\n    data: {}\r\n}\r\n\r\ntype FollowRequestType = {\r\n    userId: number\r\n}\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<FollowRequestType, AxiosResponse<FollowResponseType>>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<FollowRequestType, AxiosResponse<FollowResponseType>>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    },\r\n}\r\n\r\ntype GetProfileInfoResponseType = ProfileType\r\n\r\ntype GetStatusResponseType = string\r\n\r\ntype UpdateStatusResponseType = {\r\n    resultCode: ResultCodes,\r\n    messages: string[],\r\n    data: {}\r\n}\r\n\r\ntype UpdateStatusRequestType = {\r\n    status: string\r\n}\r\n\r\ntype SaveProfileResponseType = {\r\n    resultCode: ResultCodes,\r\n    messages: string[],\r\n    data: {}\r\n}\r\n\r\ntype SaveProfileRequestType = ProfileType\r\n\r\nexport const profileAPI = {\r\n    getProfileInfo(userId: number | null) {\r\n        return instance.get<GetProfileInfoResponseType>(`profile/${userId}`)\r\n            .then(response => response.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<GetStatusResponseType>(`profile/status/${userId}`)\r\n        .then(response => response.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put <UpdateStatusRequestType, AxiosResponse<UpdateStatusResponseType>>(`profile/status`, { status: status })\r\n        .then(response => response.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<SaveProfileRequestType, AxiosResponse<SaveProfileResponseType>>(`profile`, profile)\r\n            .then(response => response.data);\r\n    }\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n    },\r\n    resultCode: ResultCodes,\r\n    messages: string[]\r\n}\r\n\r\ntype LoginResponseType = {\r\n    data: {\r\n        userId: number,\r\n    },\r\n    resultCode: ResultCodes | ResultCodeForCaptcha,\r\n    messages: string[]\r\n}\r\n\r\ntype LoginRequestType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: null | string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`)\r\n            .then(response => response.data);\r\n    },\r\n    login(email: string, password: string, rememberMe=false, captcha: null | string = null) {\r\n        return instance.post <LoginRequestType, AxiosResponse<LoginResponseType>>(`auth/login`, { email: email, password: password, rememberMe: rememberMe, captcha: captcha })\r\n            .then(response => response.data);\r\n    },\r\n    logout() {\r\n        return instance.delete<LoginResponseType>(`auth/login`)\r\n            .then(response => response.data);\r\n    }\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(response => response.data);\r\n    }\r\n}\r\n","import { InferActionsTypes } from './reduxStore';\r\nimport { MessageType, DialogType } from \"../types/types\";\r\n\r\nconst initialState = {\r\n  messagesData: [\r\n    { id: 1, message: \"Hi\" },\r\n    { id: 2, message: \"How are you?\" },\r\n    { id: 3, message: \"Yo\" },\r\n  ] as MessageType[],\r\n  dialogsData: [\r\n    {\r\n      id: 1,\r\n      userName: \"Dimych\",\r\n      photo:\r\n        \"https://st2.depositphotos.com/3873339/8013/i/600/depositphotos_80131050-stock-photo-realistic-square-picture-frame-on.jpg\",\r\n    },\r\n    {\r\n      id: 2,\r\n      userName: \"Max\",\r\n      photo:\r\n        \"https://st2.depositphotos.com/3873339/8013/i/600/depositphotos_80131050-stock-photo-realistic-square-picture-frame-on.jpg\",\r\n    },\r\n    {\r\n      id: 3,\r\n      userName: \"Anna\",\r\n      photo:\r\n        \"https://st2.depositphotos.com/3873339/8013/i/600/depositphotos_80131050-stock-photo-realistic-square-picture-frame-on.jpg\",\r\n    },\r\n    {\r\n      id: 4,\r\n      userName: \"Sveta\",\r\n      photo:\r\n        \"https://st2.depositphotos.com/3873339/8013/i/600/depositphotos_80131050-stock-photo-realistic-square-picture-frame-on.jpg\",\r\n    },\r\n    {\r\n      id: 5,\r\n      userName: \"Sasha\",\r\n      photo:\r\n        \"https://st2.depositphotos.com/3873339/8013/i/600/depositphotos_80131050-stock-photo-realistic-square-picture-frame-on.jpg\",\r\n    },\r\n    {\r\n      id: 6,\r\n      userName: \"Victor\",\r\n      photo:\r\n        \"https://st2.depositphotos.com/3873339/8013/i/600/depositphotos_80131050-stock-photo-realistic-square-picture-frame-on.jpg\",\r\n    },\r\n  ] as DialogType[],\r\n};\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessage: string) => ({ type: 'messages/SEND-MESSAGE', newMessage: newMessage } as const)\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst messagesReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'messages/SEND-MESSAGE': {\r\n      return {\r\n        ...state,\r\n        messagesData: [\r\n          ...state.messagesData,\r\n          {\r\n            id: state.messagesData[state.messagesData.length - 1].id + 1,\r\n            message: action.newMessage,\r\n          },\r\n        ],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default messagesReducer;\r\n\r\n","export const updateObjectInArray = (items, check, objPropName, newObjProps) => {\r\n    return items.map((item) => {\r\n        if (item[objPropName] === check) {\r\n            return { ...item, ...newObjProps };\r\n        }\r\n        return item;\r\n    })\r\n}\r\n","import { ResultCodes } from './../api/api';\r\nimport { AppStateType, InferActionsTypes } from './reduxStore';\r\nimport { UserType } from '../types/types';\r\nimport { userAPI } from '../api/api'\r\nimport { updateObjectInArray } from '../utils/object-helpers';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst initialState = {\r\n  users: [] as UserType[],\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as number[]\r\n};\r\n\r\nexport const actions = {\r\n  followSuccess: (userId: number) => ({ type: 'findUsers/FOLLOW_SUCCESS', userId } as const),\r\n\r\n  unfollowSuccess: (userId: number) => ({ type: 'findUsers/UNFOLLOW_SUCCESS', userId } as const),\r\n\r\n  setUsers: (users: UserType[]) => ({ type: 'findUsers/SET_USERS', users } as const),\r\n\r\n  setCurrentPage: (pageNumber: number) => ({\r\n    type: 'findUsers/SET_CURRENT_PAGE',\r\n    pageNumber,\r\n  } as const),\r\n\r\n  setTotalUsersCount: (totalUsersCount: number) => ({\r\n    type: 'findUsers/SET_TOTAL_USERS_COUNT',\r\n    count: totalUsersCount,\r\n  } as const),\r\n\r\n  setIsFetching: (isFetching: boolean) => ({\r\n    type: 'findUsers/SET_IS_FETCHING',\r\n    isFetching: isFetching,\r\n  } as const),\r\n  setFollowingProgress: (isFollowing: boolean, userId: number) => ({\r\n    type: 'findUsers/SET_FOLLOWING_PROGRESS',\r\n    isFollowing: isFollowing,\r\n    userId: userId\r\n  } as const),\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nconst findUsersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'findUsers/FOLLOW_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", { followed: true })\r\n      };\r\n    }\r\n    case 'findUsers/UNFOLLOW_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", { followed: false })\r\n      };\r\n    }\r\n    case 'findUsers/SET_USERS': {\r\n      return { ...state, users: action.users };\r\n    }\r\n    case 'findUsers/SET_CURRENT_PAGE': {\r\n      return { ...state, currentPage: action.pageNumber };\r\n    }\r\n    case 'findUsers/SET_TOTAL_USERS_COUNT': {\r\n      return { ...state, totalUsersCount: action.count };\r\n    }\r\n    case 'findUsers/SET_IS_FETCHING': {\r\n      return { ...state, isFetching: action.isFetching };\r\n    }\r\n    case 'findUsers/SET_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFollowing\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter(id => id !== action.userId)\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => async (dispatch) => {\r\n  dispatch(actions.setIsFetching(true));\r\n  dispatch(actions.setCurrentPage(page));\r\n  const data = await userAPI.getUsers(page, pageSize);\r\n  dispatch(actions.setIsFetching(false));\r\n  dispatch(actions.setUsers(data.items));\r\n  dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, apiMethod: any, userId: number, actionCreator: (userId: number) => ActionsTypes) => {\r\n  dispatch(actions.setFollowingProgress(true, userId));\r\n  const data = await apiMethod(userId);\r\n  if (data.resultCode === ResultCodes.Succsess) {\r\n    dispatch(actionCreator(userId));\r\n  }\r\n  dispatch(actions.setFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n  await _followUnfollowFlow(dispatch, userAPI.follow.bind(userAPI), userId, actions.followSuccess);\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n  await _followUnfollowFlow(dispatch, userAPI.unfollow.bind(userAPI), userId, actions.unfollowSuccess);\r\n}\r\n\r\nexport default findUsersReducer;\r\n"],"sourceRoot":""}